//http://sandbox.kidstrythisathome.com/erdos/

//$ bin/scribblec.sh modules/core/src/test/scrib/test/test1/Test1.scr -ip modules/core/src/test/scrib/ -d modules/core/src/test/scrib/ -session Proto1 -api Proto1 C -V
//$ javadoc -cp modules/cli/target/classes/';'modules/core/target/classes';'modules/trace/target/classes';'modules/parser/target/classes';c:\Users\Raymond\.m2\repository\org\antlr\antlr-runtime\3.2\antlr-runtime-3.2.jar;'modules/validation/target/classes/';'modules/projection/target/classes/';C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.9\jackson-mapper-asl-1.9.9.jar;C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.9\jackson-core-asl-1.9.9.jar;'modules/core/src/test/scrib modules/core/src/test/scrib/test/test1/Proto1*.java -d test/doc/test1

module test.test1.Test1;

type <java> "java.lang.Integer" from "rt.jar" as Integer;

global protocol Proto1(role C, role S)
{
	// - make linear interface for sending/receiving
	// - lazy send for lazy eval? (lazy effects wrapped up in monad)
	
	choice at S
	{
		4(Integer, Integer) from S to C;
		5() from S to C;
		1(Integer) from C to S;
		2(Integer) from S to C;
		3(Integer) from C to S;
	}
	or
	{
		6(Integer) from S to C;
	}

	/*rec X
	{
		choice at C
		{
			ADD(Integer, Integer) from C to S;
			RES(Integer) from S to C;
			continue X;
		}
		or
		{
			BYE() from C to S;
		}
	}*/
}
