module src.SupplierInfo;

type <xsd> "UserName" from "AUTH.xsd" as username;
type <xsd> "Password" from "AUTH.xsd" as password;
type <xsd> "UUID" from "AUTH.xsd" as uuid;
type <xsd> "/retailhub/supplierdetails" from "Retailer.xsd" as supplierdetails;
type <xsd> "/retailhub/contractdetails" from "Retailer.xsd" as contractdetails;

type <xsd> "..." from "...xsd" as usercontext;
type <xsd> "..." from "...xsd" as filters;

type <java> "java.lang.Integer" from "rt.jar" as int;


global protocol PartnershipSupplier(
		role loginsvc,
		role requestor,
		role authorisersvc,
		//role usersvc,
		role filtersvc,
		role suppliersvc,
		role contractsvc)
{
	login(username, password) from requestor to loginsvc;
	choice at loginsvc
	{
		//loginsuccess() from loginsvc to requestor;  // FIXME: error not detected: because of liveness of other parties? (error is detected if mainBlock is not looped)
		loginfailure() from loginsvc to requestor;
		//getsuppliers(uuid) from requestor to authorisersvc;  // Error
		0() from requestor to authorisersvc;
		0() from authorisersvc to filtersvc;
		0() from authorisersvc to suppliersvc;
		0() from authorisersvc to contractsvc;
	}
	or
	{
		loginsuccess() from loginsvc to requestor;
		rec mainBlock
		{
			choice at requestor
			{
				// GET SUPPLIER INFO
				getsuppliers(uuid) from requestor to authorisersvc;
				//1() from authorisersvc to contractsvc;  // FIXME: massive state explosion
				choice at authorisersvc
				{
					// DENIED
					deny() from authorisersvc to requestor;

					1() from authorisersvc to suppliersvc;  // FIXME: investigate commenting (should be OK by recursion?) -- projection problem: local choice subjects (inference against empty cases)
					1() from authorisersvc to filtersvc;  // FIXME: projection problem when commented: local choice subject for filtersvc -- if resolved, then a graph building problem
				}
				or
				{
					// PREPARE FILTERED SUPPLIER INFO FOR REQUESTOR
					getsuppliers() from authorisersvc to suppliersvc;
					suppliers() from suppliersvc to authorisersvc;

					filter1(usercontext, filters, supplierdetails) from authorisersvc to filtersvc;
					filtered1() from filtersvc to authorisersvc;
					suppliers() from authorisersvc to requestor;
				}
			}
			or
			{
				// GET CONTRACT INFO
				getcontracts() from requestor to authorisersvc;
				//2() from authorisersvc to suppliersvc;
				choice at authorisersvc
				{
					// DENIED
					deny() from authorisersvc to requestor;

					2() from authorisersvc to contractsvc;
					2() from authorisersvc to filtersvc;
				}
				or
				{
					// PREPARE FILTERED SUPPLIER INFO FOR REQUESTOR
					getcontracts() from authorisersvc to contractsvc;
					suppliers() from contractsvc to authorisersvc;

					filter2(usercontext, filters, supplierdetails) from authorisersvc to filtersvc;
					filtered2() from filtersvc to authorisersvc;
					contracts() from authorisersvc to requestor;
				}
			}
			continue mainBlock;
		}
	}
}

