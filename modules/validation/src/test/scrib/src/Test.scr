//Raymond@HZHL3 ~/code/scribble-java/scribble-java
//$ java -cp modules/cli/target/classes/';'modules/core/target/classes';'modules/trace/target/classes';'modules/parser/target/classes';c:\Users\Raymond\.m2\repository\org\antlr\antlr-runtime\3.2\antlr-runtime-3.2.jar;'modules/validation/target/classes/';'modules/projection/target/classes/';C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.9\jackson-mapper-asl-1.9.9.jar;C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.9\jackson-core-asl-1.9.9.jar' org.scribble.cli.CommandLine -path modules/validation/src/test/scrib/src/ -validate Test
//$ java -cp modules/cli/target/classes/';'modules/core/target/classes';'modules/trace/target/classes';'modules/parser/target/classes';c:\Users\Raymond\.m2\repository\org\antlr\antlr-runtime\3.2\antlr-runtime-3.2.jar;'modules/validation/target/classes/';'modules/projection/target/classes/';C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.9\jackson-mapper-asl-1.9.9.jar;C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.9\jackson-core-asl-1.9.9.jar' org.scribble2.cli.CommandLine -path modules/validation/src/test/scrib/src/ -validate Test.scr


//$ java -cp modules/cli/target/classes/';'modules/core/target/classes';'modules/trace/target/classes';'modules/parser/target/classes';c:\Users\Raymond\.m2\repository\org\antlr\antlr-runtime\3.2\antlr-runtime-3.2.jar;'modules/validation/target/classes/';'modules/projection/target/classes/';C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.9\jackson-mapper-asl-1.9.9.jar;C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.9\jackson-core-asl-1.9.9.jar' org.scribble2.cli.CommandLine -path modules/validation/src/test/scrib/src modules/validation/src/test/scrib/src/Test.scr


module Test;

//import Test2;


global protocol Foo(role A, role B)
{
	choice at B
	{
		1a() from B to A;
		1b() from A to B;
	}
	or
	{
		2a() from B to A;
		2b() from A to B;
	}
}


/*
global protocol Foo(role A, role B)
{
	1() from A to B;
	choice at A
	{
		2() from A to B;
		do Bar(A, B);
	}
	or
	{
		4() from A to B;
	}
}

global protocol Bar(role A, role B)
{
	3() from B to A;
	do Foo(B, A);
}
//*/

/*
global protocol Foo(role A, role B)
{
	0() from A to B;
	rec X
	{
		choice at A
		{
			1() from A to B;
			2() from B to A;
			continue X;
		}
		or
		{
			3() from A to B;
		}
	}
	4() from A to B;
}
//*/


/*
global protocol Foo(role A, role B)
{
	0() from A to B;
	choice at A
	{
		1a() from A to B;
	}
	or
	{
		2a() from A to B;
		2b() from B to A;
	}
	3() from B to A;
}
//*/

/*
global protocol Foo(role A, role B)
{
	rec X
	{
		continue X;
	}
}
//*/


/*
sig <java> "foo" from "bar" as M1;

global protocol Foo(role A, role B)
{
	choice at A
	{
		M1 from A to B;
	}
	or
	{
		//do Foo(A, B);  // Not guarded -- FSM translation would be weird
		//do Bar<M1>(A, B);
		do Bar<1()>(A, B);
	}
}

global protocol Bar<sig M>(role A, role B)
{
	M from A to B;
}
//*/


/*
sig <java> "foo" from "bar" as M1;

global protocol Foo<sig M>(role A, role B)
{
	() from A to B;
	M from A to B;
	M1 from A to B;
	//M2 from A to B;
}
//*/


/*
global protocol Foo<sig M2>(role A, role B)
{
	choice at A
	{
		//1() from A to B;
		//do Bar<1()>(A, B);
		//do Bar<2()>(A, B);
		M2 from A to B;
	}
	or
	{
		//M2 from A to B;
		//1() from A to B;
		//do Bar<M2>(A, B);
		do Bar<1()>(A, B);
	}
}

global protocol Bar<sig M3>(role C, role D)
{
	M3 from C to D;
}
//*/

/*
global protocol Foo(role A, role B)
{
	1() from A to B;
	do Test2.Bar(A, B);
	//3() from A to B;
}
//*/

/*
global protocol Foo(role A, role B)
{
	choice at A
	{
		1() from A to B;
	}
	or
	{
		do Test2.Bar(A, B);
		//do Bar(A, B);
	}
}

global protocol Bar(role C, role D)
{
	//1() from C to D;
	2() from C to D;
}
//*/

/*
global protocol Foo(role A, role B)
{
	choice at A
	{
		1() from A to B;
	}
	or
	{
		//1() from A to B;
		2() from A to B;
	}
}
//*/

/*global protocol Foo(role A, role B)
{
	1() from A to B;
	do Foo(A, B);
	//3() from A to B;
}

global protocol Bar(role C, role D)
{
	2() from C to D;
	do Foo(C, D);
	//2() from C to D;
}*/

/*
global protocol MyProto(role A, role B, role C, role D)
{
	rec X {
		choice at A
		{
			1() from A to B;
			continue X;
			//1() from A to B;
		}
		or
		{
			//1() from A to B;
			2() from A to B;
			continue X;
		}
	}
	//3() from A to B;
	4() from C to D;
}
//*/
